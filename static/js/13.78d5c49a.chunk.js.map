{"version":3,"sources":["components/Projects/ProjectCard.js","pages/Projects.js"],"names":["Language","languages_url","repo_url","useState","data","setData","handleRequest","useCallback","a","axios","get","response","console","error","message","useEffect","array","total_count","index","push","col","JavaScript","C","Python","HTML","Shell","Dockerfile","Java","Rust","CSS","CMake","Dart","Kotlin","Swift","warn","className","length","map","language","href","target","style","backgroundColor","Math","trunc","ProjectCard","value","name","description","svn_url","pushed_at","Row","Col","dayjs","format","id","size","API","Projects","username","specific","allReposAPI","specificReposAPI","projectsArray","setProjectsArray","fetchRepos","repoList","repoName","Main","title","data-testid","to","project"],"mappings":"sQAmDMA,EAAW,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SAAe,EACxBC,mBAAS,IADe,mBACzCC,EADyC,KACnCC,EADmC,KAG1CC,EAAgBC,sBAAW,sBAAC,4BAAAC,EAAA,+EAEPC,IAAMC,IAAIT,GAFH,cAExBU,EAFwB,yBAGvBN,EAAQM,EAASP,OAHM,gCAK9BQ,QAAQC,MAAM,KAAMC,SALU,yDAO/B,CAACb,IAEJc,qBAAU,WACRT,MACC,CAACA,IAEJ,IAAMU,EAAQ,GACVC,EAAc,EAClB,IAAK,IAAIC,KAASd,EAChBY,EAAMG,KAAKD,GACXD,GAAeb,EAAKc,GAGtB,IAAME,EAAM,CACVC,WAAY,UACZC,EAAG,UACHC,OAAQ,UACRC,KAAM,UACNC,MAAO,UACPC,WAAY,UACZC,KAAM,UACNC,KAAM,UACNC,IAAK,UACLC,MAAO,UACPC,KAAM,UACNC,OAAQ,UACRC,MAAO,WAKT,OAHArB,QAAQsB,KAAKd,EAAG,GAId,sBAAKe,UAAU,OAAf,uBACa,IACVnB,EAAMoB,OACHpB,EAAMqB,KAAI,SAACC,GAAD,OACR,mBAGEC,KAAMrC,EAAQ,oBAAgBoC,GAC9BE,OAAO,UAJT,SAME,sBACEL,UAAU,OACVM,MAAO,CACLC,gBAAiBtB,EAAIkB,GAAYlB,EAAIkB,GAAY,WAHrD,SAME,oBAAGH,UAAU,eAAb,UACGG,EADH,IACc,IACXK,KAAKC,MAAOxC,EAAKkC,GAAYrB,EAAe,KAAQ,GAFvD,WAXGqB,MAkBT,+BAMKO,EA/GK,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACbC,EAAyDD,EAAzDC,KAAMC,EAAmDF,EAAnDE,YAAaC,EAAsCH,EAAtCG,QAAShD,EAA6B6C,EAA7B7C,cAAeiD,EAAcJ,EAAdI,UAEnD,OADAtC,QAAQsB,KAAKc,GAEX,qBAAKb,UAAU,iBAAf,SACE,0BAASA,UAAU,YAAnB,UACE,eAACgB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,mCACE,6BACE,mBAAGb,KAAMU,EAAT,SAAmBF,MAErB,sBAAMZ,UAAU,YAAhB,SACGkB,IAAMH,GAAWI,OAAO,qBAI/B,cAACF,EAAA,EAAD,UACE,mBAAGG,GAAG,SAAShB,KAAMU,EAAST,OAAO,UAArC,SACE,cAAC,IAAD,CAAQgB,KAAM,YAKpB,qBAAKrB,UAAU,YAAf,SACGlC,EACC,cAAC,EAAD,CAAUA,cAAeA,EAAeC,SAAU+C,IAElD,uCAIJ,qBAAKd,UAAU,cAAf,SACE,4BAAIa,YC7BRS,EAAM,yBAyEGC,UAvEE,WACf,IAAMC,EAAW,aACXC,EAAW,GAEXC,EAAW,UAAMJ,EAAN,kBAAmBE,EAAnB,sCACXG,EAAgB,UAAML,EAAN,kBAAmBE,GALpB,EAOqBxD,mBAAS,IAP9B,mBAOd4D,EAPc,KAOCC,EAPD,KASfC,EAAa1D,sBAAW,sBAAC,sCAAAC,EAAA,6DACzB0D,EAAW,GADc,kBAIJzD,IAAMC,IAAImD,GAJN,OAIrBlD,EAJqB,OAM3BuD,EAAWvD,EAASP,KANO,uBASJwD,GATI,iEAShBO,EATgB,kBAWA1D,IAAMC,IAAN,UAAaoD,EAAb,YAAiCK,IAXjC,QAWjBxD,EAXiB,OAYvBuD,EAAS/C,KAAKR,EAASP,MAZA,kMAezBQ,QAAQC,MAAM,KAAMC,SAfK,QAmB3BkD,EAAiBE,GAnBU,kDAqB3BtD,QAAQC,MAAM,KAAMC,SArBO,8EAuB5B,CAAC+C,IAMJ,OAJA9C,qBAAU,WACRkD,MACC,CAACA,IAGF,8BACE,cAACG,EAAA,EAAD,CACEC,MAAM,WACNrB,YAAY,yCAFd,SAIE,0BAASb,UAAU,OAAOoB,GAAG,WAA7B,UACE,iCACE,sBAAKpB,UAAU,QAAf,UACE,oBAAImC,cAAY,UAAhB,SACE,cAAC,IAAD,CAAMC,GAAG,YAAT,wBAEF,yFAIHR,EAAc3B,OACb2B,EAAc1B,KAAI,SAACmC,EAAStD,GAAV,OAEhB,aADA,CACC,EAAD,CAEEqC,GAAE,uBAAkBrC,GACpB4B,MAAO0B,GAHT,uBACuBtD,OAMzB","file":"static/js/13.78d5c49a.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n//import React from 'react';\nimport { Github } from 'react-bootstrap-icons';\n\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n// import Card from \"react-bootstrap/Card\";\n// import Skeleton from \"react-loading-skeleton\";\nimport axios from 'axios';\nimport dayjs from 'dayjs';\n\nconst ProjectCard = ({ value }) => {\n  const { name, description, svn_url, languages_url, pushed_at } = value;\n  console.warn(description);\n  return (\n    <div className=\"cell-container\">\n      <article className=\"mini-post\">\n        <Row>\n          <Col>\n            <header>\n              <h3>\n                <a href={svn_url}>{name}</a>\n              </h3>\n              <time className=\"published\">\n                {dayjs(pushed_at).format('MMMM, YYYY')}\n              </time>\n            </header>\n          </Col>\n          <Col>\n            <a id=\"github\" href={svn_url} target=\" _blank\">\n              <Github size={50} />\n            </a>\n          </Col>\n        </Row>\n\n        <div className=\"languages\">\n          {languages_url ? (\n            <Language languages_url={languages_url} repo_url={svn_url} />\n          ) : (\n            <h3>VBA</h3>\n          )}\n        </div>\n\n        <div className=\"description\">\n          <p>{description}</p>\n        </div>\n      </article>\n    </div>\n  );\n};\n\nconst Language = ({ languages_url, repo_url }) => {\n  const [data, setData] = useState([]);\n\n  const handleRequest = useCallback(async () => {\n    try {\n      const response = await axios.get(languages_url);\n      return setData(response.data);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [languages_url]);\n\n  useEffect(() => {\n    handleRequest();\n  }, [handleRequest]);\n\n  const array = [];\n  let total_count = 0;\n  for (let index in data) {\n    array.push(index);\n    total_count += data[index];\n  }\n  //Rust lighter,  Python lighter,Kotlin, Swift,\n  const col = {\n    JavaScript: '#40e0d0',\n    C: '#fff68f',\n    Python: '#FCDC3B',\n    HTML: '#2F9599',\n    Shell: '#ffa500',\n    Dockerfile: '#0db7ed',\n    Java: '#D0A384',\n    Rust: '#C67171',\n    CSS: '#99B898',\n    CMake: '#B0A6A4',\n    Dart: '#FFAA00',\n    Kotlin: '#C8F526',\n    Swift: '#CD5C5C',\n  };\n  console.warn(col['d']);\n\n  //const colors = [\"#ffc0cb\",\"#ffa500\",\"#40e0d0\",\"#fff68f\",\"#6B5B95\",\"#88B04B\",\"#92A8D1\"]\n  return (\n    <div className=\"pb-3\">\n      Languages:{' '}\n      {array.length\n        ? array.map((language) => (\n            <a\n              key={language}\n              // className=\"badge badge-light card-link\"\n              href={repo_url + `/search?l=${language}`}\n              target=\" _blank\"\n            >\n              <span\n                className=\"chip\"\n                style={{\n                  backgroundColor: col[language] ? col[language] : '#92A8D1',\n                }}\n              >\n                <p className=\"chip-content\">\n                  {language}:{' '}\n                  {Math.trunc((data[language] / total_count) * 1000) / 10} %\n                </p>\n              </span>\n            </a>\n          ))\n        : 'code yet to be deployed.'}\n    </div>\n  );\n};\n\n\nexport default ProjectCard;\n","// import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Main from '../layouts/Main';\n\n// import Cell from '../components/Projects/ProjectCard';\n// import data from '../data/projects';\n\nimport React, { useState, useEffect, useCallback } from 'react';\n// import Container from \"react-bootstrap/Container\";\n// import Jumbotron from \"react-bootstrap/Jumbotron\";\n// import Row from \"react-bootstrap/Row\";\nimport ProjectCard from '../components/Projects/ProjectCard';\nimport axios from 'axios';\n\nconst API = 'https://api.github.com';\n\nconst Projects = () => {\n  const username = 'sarbjot-14';\n  const specific = [];\n\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specificReposAPI = `${API}/repos/${username}`;\n\n  const [projectsArray, setProjectsArray] = useState([]);\n\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI);\n      // slicing to the length\n      repoList = response.data; //[...response.data.slice(0, length)];\n      // adding specified repos\n      try {\n        for (let repoName of specific) {\n          //console.warn(`${specificReposAPI}/${repoName}`);\n          const response = await axios.get(`${specificReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n      // setting projectArray\n      // TODO: remove the duplication.\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI]);\n\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n\n  return (\n    <div>\n      <Main\n        title=\"Projects\"\n        description=\"Learn about Sarbjot Singhs's projects.\"\n      >\n        <article className=\"post\" id=\"projects\">\n          <header>\n            <div className=\"title\">\n              <h2 data-testid=\"heading\">\n                <Link to=\"/projects\">Projects</Link>\n              </h2>\n              <p>A selection of projects that I&apos;m not too ashamed of</p>\n            </div>\n          </header>\n\n          {projectsArray.length ? (\n            projectsArray.map((project, index) => (\n              // <h1>{project.name}</h1>\n              <ProjectCard\n                key={`project-card-${index}`}\n                id={`project-card-${index}`}\n                value={project}\n              />\n            ))\n          ) : (\n            <h3>Loading...</h3>\n          )}\n        </article>\n      </Main>\n    </div>\n  );\n};\nexport default Projects;\n"],"sourceRoot":""}